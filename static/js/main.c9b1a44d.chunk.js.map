{"version":3,"sources":["components/CircleSelector/CircleSelector.jsx","components/Circles/Circles.jsx","App.js","reportWebVitals.js","index.js"],"names":["CircleSelector","handleCircleClick","selectedCircleIdx","isSelected","className","map","selector","idx","onClick","Circles","circle","App","clickedSelIdx","console","log","setState","state","getInitialState","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAuBeA,EApBQ,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,kBAAmBC,EAAmC,EAAnCA,kBAAmBC,EAAgB,EAAhBA,WAI7D,OACE,qBAAKC,UAAU,iBAAf,SAH4B,CAAC,EAAE,EAAE,EAAE,GAIVC,KAAI,SAACC,EAAUC,GAAX,OACzB,wBACEH,UAAS,UAAKD,EAAWI,EAAKL,GAAqB,0BAA4B,kBAC/EM,QAAU,WACRP,EAAkBM,IAHtB,SAIOJ,EAAWI,EAAKL,GAAhB,iBAA+CI,EAA/C,qCAEgBA,WCChBG,G,MAdC,SAAC,GAAqC,IAApCP,EAAmC,EAAnCA,kBAAmBC,EAAgB,EAAhBA,WAInC,OACE,qBAAKC,UAAU,UAAf,SAHc,CAAC,EAAE,EAAE,EAAE,GAIVC,KAAI,SAACK,EAAQH,GAAT,OACX,qBAAKH,UAAS,UAAKD,EAAWI,EAAKL,GAAqB,mBAAqB,WAA7E,SACGQ,WCwCIC,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAUFV,kBAAoB,SAACW,GACnBC,QAAQC,IAAI,WACZ,EAAKC,SAAS,CAAEb,kBAAmBU,KAbvB,EAgBdT,WAAa,SAACI,EAAKL,GACjB,OAAIK,IAAQL,GAfZ,EAAKc,MAAL,eACK,EAAKC,mBAHE,E,mDAOd,WACE,MAAO,CAAEf,kBAAmB,Q,oBAgB9B,WACE,OACE,sBAAKE,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,qCACA,iCACE,cAAC,EAAD,CACEH,kBAAmBiB,KAAKjB,kBACxBE,WAAYe,KAAKf,WACjBD,kBAAmBgB,KAAKF,MAAMd,oBAEhC,cAAC,EAAD,CACEA,kBAAmBgB,KAAKF,MAAMd,kBAC9BC,WAAYe,KAAKf,uB,GArCXgB,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c9b1a44d.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './CircleSelector.css'\n\nconst CircleSelector = ({handleCircleClick, selectedCircleIdx, isSelected}) => {\n\n  const circleSelectorButtons = [1,2,3,4];\n\n  return (\n    <div className=\"CircleSelector\">\n      {circleSelectorButtons.map((selector, idx) => \n        <button \n          className={`${isSelected(idx, selectedCircleIdx) ? \"CircleSelector selected\" : \"CircleSelector\" }`} \n          onClick={ () => {\n            handleCircleClick(idx)}}>\n              {isSelected(idx, selectedCircleIdx) ? `Circle ${selector} selected` \n              : \n              `Select Circle ${selector}`\n              }\n        </button>\n      )}\n    </div>\n)}\n\nexport default CircleSelector;","import React from 'react';\nimport styles from './Circles.css'\n\nconst Circles = ({selectedCircleIdx, isSelected}) => {\n  \n  const circles = [1,2,3,4];\n\n  return (\n    <div className=\"Circles\">\n      {circles.map((circle, idx) => \n        <div className={`${isSelected(idx, selectedCircleIdx) ? 'Circles selected' : 'Circles'}`}>\n          {circle}\n        </div>\n      )}\n    </div>\n  )}\n\nexport default Circles;","import React, { Component } from \"react\";\nimport styles from \"./App.css\";\n\nimport CircleSelector from \"./components/CircleSelector/CircleSelector\";\nimport Circles from \"./components/Circles/Circles\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ...this.getInitialState(),\n    };\n  }\n\n  getInitialState() {\n    return { selectedCircleIdx: null };\n  }\n\n  handleCircleClick = (clickedSelIdx) => {\n    console.log(\"clicked\");\n    this.setState({ selectedCircleIdx: clickedSelIdx });\n  };\n\n  isSelected = (idx, selectedCircleIdx) => {\n    if (idx === selectedCircleIdx) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector\n            handleCircleClick={this.handleCircleClick}\n            isSelected={this.isSelected}\n            selectedCircleIdx={this.state.selectedCircleIdx}\n          />\n          <Circles\n            selectedCircleIdx={this.state.selectedCircleIdx}\n            isSelected={this.isSelected}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}